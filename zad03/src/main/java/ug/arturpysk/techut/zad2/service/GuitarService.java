package ug.arturpysk.techut.zad2.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import ug.arturpysk.techut.zad2.domain.Guitar;

public class GuitarService implements GuitarManager {
    private final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
    private final Connection connection;
    private final Statement statement;
    private final String CREATE_TABLE_SQL = "CREATE TABLE Guitar (id bigint GENERATED BY DEFAULT AS IDENTITY, producer VARCHAR(30) UNIQUE, price DOUBLE, madeDate DATE, isReserved BOOLEAN)";
    private boolean tableExists = false;
    
    private PreparedStatement addGuitarStmt;
    private PreparedStatement getAllGuitarsStmt;
    private PreparedStatement getGuitarByIdStmt;
    private PreparedStatement deleteAllGuitarsStmt;
    private PreparedStatement deleteGuitarByIdStmt;
    private PreparedStatement getGuitarsCheaperThanStmt;

    public GuitarService() throws SQLException {
        connection = DriverManager.getConnection(URL);
        statement = connection.createStatement();

        ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

        while (rs.next()) {
            if ("Guitar".equalsIgnoreCase(rs.getString("table_name"))) {
                tableExists = true;
                break;
            }
        }

        if (!tableExists) {
            statement.executeUpdate(CREATE_TABLE_SQL);
        }
        
        addGuitarStmt = connection.prepareStatement("INSERT INTO Guitar (producer, price, madeDate, isReserved) VALUES (?,?,?,?)");
        getAllGuitarsStmt = connection.prepareStatement("SELECT * FROM Guitar");
        getGuitarByIdStmt = connection.prepareStatement("SELECT * FROM Guitar WHERE ID=?");
        deleteAllGuitarsStmt = connection.prepareStatement("DELETE FROM Guitar");
        deleteGuitarByIdStmt = connection.prepareStatement("DELETE FROM Guitar WHERE ID=?");
        getGuitarsCheaperThanStmt = connection.prepareStatement("SELECT * FROM Guitar WHERE price < ?");
    }
    
    public void addGuitar(Guitar guitar) {
    	try {
    		addGuitarStmt.setString(1, guitar.getProducer());
    		addGuitarStmt.setDouble(2, guitar.getPrice());
    		addGuitarStmt.setDate(3, guitar.getMadeDate());
    		addGuitarStmt.setBoolean(4, guitar.getIsReserved());
    		
    		addGuitarStmt.executeUpdate();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    }
    
    public List<Guitar> getAllGuitars() {
    	List<Guitar> guitars = new ArrayList<Guitar>();
    	try {
    		ResultSet rs = getAllGuitarsStmt.executeQuery();
    		
    		while (rs.next() ) {
    			Guitar newGuitar = new Guitar(rs.getString("producer"),
    					rs.getDouble("price"), rs.getDate("madeDate"), rs.getBoolean("isReserved"));
    			guitars.add(newGuitar);
    		}
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    	
    	return guitars;
    }
    
    public List<Guitar> getGuitarsCheaperThan(double price) {
    	List<Guitar> guitars = new ArrayList<Guitar>();
    	
    	try {
    		getGuitarsCheaperThanStmt.setDouble(1, price);
    		ResultSet rs = getGuitarsCheaperThanStmt.executeQuery();
    		
    		while (rs.next()) {
    			guitars.add(new Guitar(rs.getString("producer"),
    					rs.getDouble("price"), rs.getDate("madeDate"), rs.getBoolean("isReserved")));
    		}
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    	
    	return guitars;
    }
    
    public Guitar getGuitarById(int id) {
		Guitar newGuitar = new Guitar();
    	try {
    		getGuitarByIdStmt.setInt(1, id);
    		ResultSet rs = getGuitarByIdStmt.executeQuery();
    		
    		while (rs.next() ) {
    			newGuitar = new Guitar(rs.getString("producer"),
    					rs.getDouble("price"), rs.getDate("madeDate"), rs.getBoolean("isReserved"));
    		}
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    	
    	return newGuitar;
    }
    
    public void deleteAllGuitars() {
    	try {
    		deleteAllGuitarsStmt.executeUpdate();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    }
    
    public void deleteGuitarById(int id) {
    	try {
    		deleteGuitarByIdStmt.setInt(1, id);
    		deleteGuitarByIdStmt.executeQuery();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    }
    
    public boolean addGuitars(List<Guitar> guitars) {

        try {
            connection.setAutoCommit(false);

            for (Guitar guitar : guitars) {
        		addGuitarStmt.setString(1, guitar.getProducer());
        		addGuitarStmt.setDouble(2, guitar.getPrice());
        		addGuitarStmt.setDate(3, guitar.getMadeDate());
        		addGuitarStmt.setBoolean(4, guitar.getIsReserved());

        		addGuitarStmt.executeUpdate();
            }

            connection.commit();

            return true;
        } catch (SQLException e) {
            System.out.println("Rollback");
            try {
                connection.rollback();
            } catch (SQLException e1) {

                e1.printStackTrace();
            }
        }

        return false;
    }
}